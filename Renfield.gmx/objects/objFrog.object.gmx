<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFrog</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objWeapon</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Default values

facing = 1;
moveSpeed = room_speed / 12;
canEat[0] = objFly;
canEat[1] = objFlyPlaced;
canEat[2] = objSpider;
canEat[3] = objSpiderPlaced;
xp = 0;
xpToLevel = 10;
givenXp = 5;

level = 1;
hp = 9 + level;
maxHp = hp;
armor = 1.0;

placed = false;
held = false;
onGround = false;
tarX = x;
tarY = y;


//scripts
autoAttack = scrFrogShoot;
playerAttack = scrFrogShootHeld;
placeScript = scrPlace;

//objects
placed = objFrogPlaced;
held = objFrogHeld;
base = objFrog;

//Specific variables
jumping = false;
dir = 1;
shot = false;

//For ground movement
baseGravity = GRAVITY;
maxVelocity = 30;
vertSpeed = 0;

//Animation
heldAnimation = "";
placedAnimation = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set alarm for jumping

if (alarm[3] &lt;= 0) {
    var r = irandom(10);
    alarm[3] = room_speed * r;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start jumping

var dir = irandom(2);

if (dir == 0) {
    dir--;
}

jumping = true;
tarX = x + sprite_width * 2 * dir;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call parent event

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump movement

if (jumping) {
    if (abs(x - tarX) &lt;= 4) {
        jumping = false;
        speed = 0;
    } else {
    
        if (x &lt; tarX) {
            proposedXMvt = moveSpeed;
        } else {
            proposedXMvt = moveSpeed * -1;
        }
    
        var hCollide;
        hCollide = instance_place(x+proposedXMvt, y, objParentFloor);
        if(hCollide != noone) {
          if(hCollide.wallType == SOLIDFLOOR) {
            var yplus = 0;
            while(place_meeting(x+proposedXMvt, y-yplus, objParentFloor) &amp;&amp; yplus &lt;= abs(1*proposedXMvt))
              yplus += 1;
            if(place_meeting(x+proposedXMvt, y-yplus,objParentFloor)) {
              while(!place_meeting(x+sign(proposedXMvt), y, objParentFloor))
                x += sign(proposedXMvt);
              proposedXMvt = 0;
            } else {
              y -= yplus;
            }
          }
        }

        if (proposedXMvt != 0) {        
            move_towards_point(tarX, y, moveSpeed);
        } else {
            tarX = x;
        }
    }
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for ground collisions


vertSpeed += baseGravity;

if(vertSpeed &gt; maxVelocity)
  vertSpeed = maxVelocity;


var vCollide;
vCollide = instance_place(x, y+vertSpeed, objParentFloor);
if(vCollide != noone) {
  if(vCollide.wallType == SOLIDFLOOR) {
    while(!place_meeting(x,y+sign(vertSpeed),objParentFloor))
      y += sign(vertSpeed);
    vertSpeed = 0;
    onGround = true;
  }
  if ((vCollide.wallType == JUMPTHROUGHFLOOR) &amp;&amp; sign(vertSpeed) == 1) {
    if(!place_meeting(x,y,objParentFloor)) {
      while(!place_meeting(x,y+sign(vertSpeed),objParentFloor))
        y += 1;
      vertSpeed = 0;
      onGround = true;
    } 
  }
} else {
  onGround = false;
}

y += vertSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
