<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRenfield</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup variables

onGround = false;
hp = 100;
baseGravity = 0.3;
jumpVelocity = 8;
maxVelocity = 30;
horizMvt = 3;

vertSpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check player controls and check wall/floor collisions

var strGround = "Not on Ground";
if(onGround) strGround = "On Ground";
show_debug_message("1) Renfield loc: (" + string(x) + ", " + string(y) + "), vertSpeed: " + string(vertSpeed) + ", " + strGround);


var proposedXMvt = 0;
var proposedYMvt = 0;



if(keyboard_check(vk_left)){
  proposedXMvt -= horizMvt;
} else if(keyboard_check(vk_right)){
  proposedXMvt += horizMvt;
}

if(onGround) {
  if(keyboard_check_pressed(vk_space)){
        vertSpeed = -jumpVelocity;
  }
}

vertSpeed += baseGravity;

if(vertSpeed &gt; maxVelocity)
  vertSpeed = maxVelocity;


if(proposedXMvt != 0) {
  if(place_meeting(x+proposedXMvt, y, objSolidFloor)) {
    while(place_meeting(x+proposedXMvt, y, objSolidFloor)){
      x -= sign(proposedXMvt);
      show_debug_message("proposedXMvt &amp; x: " + string(proposedXMvt) + ", " + string(x));
    }
  }
}

var hCollide;
hCollide = instance_place(x+proposedXMvt, y, objParentFloor);
if(hCollide != noone) {
  if(hCollide.wallType == SOLIDFLOOR) {
    var yplus = 0;
    while(place_meeting(x+proposedXMvt, y-yplus, objParentFloor) &amp;&amp; yplus &lt;= abs(1*proposedXMvt))
      yplus += 1;
    if(place_meeting(x+proposedXMvt, y-yplus,objParentFloor)) {
      while(!place_meeting(x+sign(proposedXMvt), y, objParentFloor))
        x += sign(proposedXMvt);
      proposedXMvt = 0;
    } else {
      y -= yplus;
    }
  }
}
x += proposedXMvt;


var vCollide;
vCollide = instance_place(x, y+vertSpeed, objParentFloor);
if(vCollide != noone) {
  if(vCollide.wallType == SOLIDFLOOR) {
    while(!place_meeting(x,y+sign(vertSpeed),objParentFloor))
      y += sign(vertSpeed);
    vertSpeed = 0;
    onGround = true;
  }
  if ((vCollide.wallType == JUMPTHROUGHFLOOR) &amp;&amp; sign(vertSpeed) == 1) {
    if(!place_meeting(x,y,objParentFloor)) {
      while(!place_meeting(x,y+sign(vertSpeed),objParentFloor))
        y += 1;
      vertSpeed = 0;
      onGround = true;
    } 
  }
} else {
  onGround = false;
}

y += vertSpeed;



/*
if(place_meeting(x, y + 1, objParentFloor)){
  if(vertSpeed &gt;= 0){
    onGround = true;
    //gravity = 0;
  }
  
  if(keyboard_check_pressed(vk_space)){
      vertSpeed = -jumpVelocity;
      onGround = false;
  }
  
} else {
  onGround = false;
}
*/

/*
if(!onGround){
  vertSpeed += baseGravity;
} else
  vertSpeed = 0;
*/
/*
if(vertSpeed &gt; maxVelocity)
  vertSpeed = maxVelocity;
*/
strGround = "Not on Ground";
if(onGround) strGround = "On Ground";
show_debug_message("2) Renfield loc: (" + string(x) + ", " + string(y) + "), vertSpeed: " + string(vertSpeed) + ", " + strGround);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
