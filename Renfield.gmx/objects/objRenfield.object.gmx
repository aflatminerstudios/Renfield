<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRenfield</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup variables

onGround = false;
hp = 100;
maxHP = 100;
baseGravity = 0.3;
jumpVelocity = 8;
maxVelocity = 30;
horizMvt = 3;
facing = 1;

vertSpeed = 0;

heldWeapon = noone;

alarm[11] = -50;


scale = 0.1;
image_xscale = scale;
image_yscale = scale;

//Animation
//Animations are: "Walk", "Idle", "Held"
skeleton_animation_set("Idle");


//skeleton_animation_set("Walk")

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set HP back to max hp
hp = maxHP;
alarm[11] = -50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>hp &lt;= 0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[11] &lt; 0) {
    skeleton_animation_set("Idle");
    alarm[11] = room_speed * 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check player movement and check wall/floor collisions

var proposedXMvt = 0;
var proposedYMvt = 0;



if(keyboard_check(vk_left)){
  proposedXMvt -= horizMvt;
  facing = -1;
} else if(keyboard_check(vk_right)){
  proposedXMvt += horizMvt;
  facing = 1;
}

if(onGround) {
  if(keyboard_check_pressed(vk_space)){
        vertSpeed = -jumpVelocity;
  }
}

vertSpeed += baseGravity;

if(vertSpeed &gt; maxVelocity)
  vertSpeed = maxVelocity;


if(proposedXMvt != 0) {
  if(place_meeting(x+proposedXMvt, y, objSolidFloor)) {
    while(place_meeting(x+proposedXMvt, y, objSolidFloor)){
      x -= sign(proposedXMvt);
      show_debug_message("proposedXMvt &amp; x: " + string(proposedXMvt) + ", " + string(x));
    }
  }
}

var hCollide;
hCollide = instance_place(x+proposedXMvt, y, objParentFloor);
if(hCollide != noone) {
  if(hCollide.wallType == SOLIDFLOOR) {
    var yplus = 0;
    while(place_meeting(x+proposedXMvt, y-yplus, objParentFloor) &amp;&amp; yplus &lt;= abs(1*proposedXMvt))
      yplus += 1;
    if(place_meeting(x+proposedXMvt, y-yplus,objParentFloor)) {
      while(!place_meeting(x+sign(proposedXMvt), y, objParentFloor))
        x += sign(proposedXMvt);
      proposedXMvt = 0;
    } else {
      y -= yplus;
    }
  }
}
x += proposedXMvt;


var vCollide;
vCollide = instance_place(x, y+vertSpeed, objParentFloor);
if(vCollide != noone) {
  if(vCollide.wallType == SOLIDFLOOR) {
    while(!place_meeting(x,y+sign(vertSpeed),objParentFloor))
      y += sign(vertSpeed);
    vertSpeed = 0;
    onGround = true;
  }
  if ((vCollide.wallType == JUMPTHROUGHFLOOR) &amp;&amp; sign(vertSpeed) == 1) {
    if(!place_meeting(x,y,objParentFloor)) {
      while(!place_meeting(x,y+sign(vertSpeed),objParentFloor))
        y += 1;
      vertSpeed = 0;
      onGround = true;
    } 
  }
} else {
  onGround = false;
}

y += vertSpeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check action button and down key and eat key

var actionPressed = keyboard_check_pressed(ord('Z')) ||
                    keyboard_check_pressed(ord('X')) ||
                    keyboard_check_pressed(ord('C')) ||
                    keyboard_check_pressed(vk_control);
                    
var downPressed = keyboard_check_pressed(vk_down);

var eatPressed = keyboard_check_pressed(ord('Q'));

var holdingWeapon = (heldWeapon != noone);

if (eatPressed &amp;&amp; holdingWeapon) {
    scrRenfieldEat(self.id);   
}

if(actionPressed){
  if(!holdingWeapon) {
    // attempt to pick up weapon if touching one
    var weapon = instance_place(x,y,objWeapon);
    if(weapon != noone){
      if(object_get_parent(weapon) != objWeaponHeld) {
        heldWeapon = weapon;
        scrConvertWeaponToHeld(weapon.id);
      }
    }
  } else {
    with (heldWeapon) {
        script_execute(playerAttack);
    }
  }
} else if(!holdingWeapon &amp;&amp; downPressed) {
  // attempt to pick up weapon if touching one
  var weapon = instance_place(x,y,objWeapon);
  if(weapon != noone){
    if(object_get_parent(weapon) != objWeaponHeld) {
      heldWeapon = weapon;
      scrConvertWeaponToHeld(weapon.id);
    }
  }
} else if(holdingWeapon &amp;&amp; downPressed) {
  // Drop weapon
  script_execute(heldWeapon.placeScript,heldWeapon.id);
  heldWeapon = noone;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move held weapon with player
if(heldWeapon != noone &amp;&amp; instance_exists(heldWeapon)) {
  heldWeapon.x = x + 20;
  heldWeapon.y = y;
  heldWeapon.facing = facing;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change animations

if (facing = 1) {
    image_xscale = 1 * scale;
} else {
    image_xscale = -1 * scale;
}

if (heldWeapon != noone) {
    if (proposedXMvt != 0) {
        if (skeleton_animation_get_ext(2) != "Walk") {
            skeleton_animation_set_ext("Hold", 1);
            skeleton_animation_set_ext("Walk",2);
        }
    } else {
        if (skeleton_animation_get_ext(2) != "Idle") {    
            skeleton_animation_set_ext("Hold", 1);
            skeleton_animation_set_ext("Idle",2);
        }
    }
} else if (proposedXMvt != 0) {
        if (skeleton_animation_get() != "Walk") {
            skeleton_animation_set("Walk");
        }
    } else {
        if (skeleton_animation_get() != "Idle") {
           skeleton_animation_set("Idle");
        }
    }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
